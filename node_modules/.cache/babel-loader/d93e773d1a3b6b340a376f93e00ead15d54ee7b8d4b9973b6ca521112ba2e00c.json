{"ast":null,"code":"var _jsxFileName = \"/Users/Aashiq/Desktop/Projects/HangManButNo/src/Main.jsx\",\n  _s = $RefreshSig$();\nimport { languages } from './languages.js';\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const [LanguagesObjectArray, setLanguages] = React.useState(languages);\n  const [CurrentWord, setCurrentWord] = React.useState(\"React\".toLowerCase());\n  const [GuessedArray, setGuessed] = React.useState([]);\n  const [CorrectLetters, setCorrectLetters] = React.useState([]);\n  const [IncorrectGuessCount, setIncorrectGuessCount] = React.useState(0);\n  useEffect(() => {\n    setIncorrectGuessCount(prevIncGuess => {\n      setLanguages(prevLang => prevLang.slice(1));\n    });\n  }, [IncorrectGuessCount]);\n  const SplitCurrentWord = CurrentWord.split(\"\");\n  const AlphabetArray = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  console.log(IncorrectGuessCount);\n  function HandleLetterButtonClick(Letter) {\n    setGuessed(prevGuessed => {\n      const newGuessed = prevGuessed.includes(Letter) ? prevGuessed : [...prevGuessed, Letter];\n      CompareGuessed(newGuessed);\n      return newGuessed;\n    });\n  }\n  function CompareGuessed(updatedGuessedArray) {\n    setCorrectLetters(prevCorr => {\n      const newCorrectLetters = SplitCurrentWord.filter(letter => updatedGuessedArray.includes(letter));\n      return [...new Set([...prevCorr, ...newCorrectLetters])];\n    });\n  }\n  const WordDisplay = SplitCurrentWord.map(prevWord => {\n    const ToReturn = CorrectLetters.includes(prevWord) ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"Letters\",\n      children: prevWord.toUpperCase()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 58\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"Letters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 118\n    }, this);\n    return ToReturn;\n  });\n  const AlphabetButtons = AlphabetArray.map(preAlph => {\n    if (CorrectLetters.includes(preAlph)) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: \"rgb(54, 167, 54)\"\n        },\n        onClick: () => HandleLetterButtonClick(preAlph),\n        className: \"AlphabetLetters\",\n        children: preAlph.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }, this);\n    } else if (!CorrectLetters.includes(preAlph) && GuessedArray.includes(preAlph)) {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          backgroundColor: \"#D02B2B\"\n        },\n        onClick: () => HandleLetterButtonClick(preAlph),\n        className: \"AlphabetLetters\",\n        children: preAlph.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => HandleLetterButtonClick(preAlph),\n        className: \"AlphabetLetters\",\n        children: preAlph.toUpperCase()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this);\n    }\n  });\n  const LanguagesDisplay = LanguagesObjectArray.map(prevLang => {\n    return prevLang.alive ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"Languages\",\n      style: {\n        backgroundColor: prevLang.backgroundColor,\n        color: prevLang.color\n      },\n      children: prevLang.name\n    }, prevLang.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 29\n    }, this) : null;\n  });\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"GameResultStatus\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"You Win!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83C\\uDF89Congratulations\\uD83C\\uDF89\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"LanguagesCollection\",\n      children: LanguagesDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"WordToGuess\",\n      children: WordDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AlphabetButtons\",\n      children: AlphabetButtons\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"NewGameButton\",\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"iRqBMjZOR+RSNGu09g9TCImMUvU=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["languages","React","useEffect","jsxDEV","_jsxDEV","Main","_s","LanguagesObjectArray","setLanguages","useState","CurrentWord","setCurrentWord","toLowerCase","GuessedArray","setGuessed","CorrectLetters","setCorrectLetters","IncorrectGuessCount","setIncorrectGuessCount","prevIncGuess","prevLang","slice","SplitCurrentWord","split","AlphabetArray","console","log","HandleLetterButtonClick","Letter","prevGuessed","newGuessed","includes","CompareGuessed","updatedGuessedArray","prevCorr","newCorrectLetters","filter","letter","Set","WordDisplay","map","prevWord","ToReturn","className","children","toUpperCase","fileName","_jsxFileName","lineNumber","columnNumber","AlphabetButtons","preAlph","style","backgroundColor","onClick","LanguagesDisplay","alive","color","name","_c","$RefreshReg$"],"sources":["/Users/Aashiq/Desktop/Projects/HangManButNo/src/Main.jsx"],"sourcesContent":["import { languages } from './languages.js';\nimport React, { useEffect } from 'react'\n\nexport default function Main(){\n\nconst [LanguagesObjectArray, setLanguages] = React.useState(languages)\nconst [CurrentWord, setCurrentWord] = React.useState(\"React\".toLowerCase())\nconst [GuessedArray, setGuessed] = React.useState([])\nconst [CorrectLetters, setCorrectLetters] = React.useState([])\nconst [IncorrectGuessCount, setIncorrectGuessCount] = React.useState(0)\n\nuseEffect(() => {\n    setIncorrectGuessCount(prevIncGuess => {\n        setLanguages(prevLang => prevLang.slice(1))\n    })\n},[IncorrectGuessCount])\n\nconst SplitCurrentWord = CurrentWord.split(\"\");\nconst AlphabetArray = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n\nconsole.log(IncorrectGuessCount)\n\nfunction HandleLetterButtonClick(Letter){\n    setGuessed(prevGuessed => {\n        const newGuessed = prevGuessed.includes(Letter) ? prevGuessed : [...prevGuessed, Letter]\n        CompareGuessed(newGuessed);\n        return newGuessed;\n    });\n}\n\nfunction CompareGuessed(updatedGuessedArray){\n    setCorrectLetters(prevCorr => {\n        const newCorrectLetters = SplitCurrentWord.filter(letter => updatedGuessedArray.includes(letter));\n        return [...new Set([...prevCorr, ...newCorrectLetters])];\n    });\n}\n\n\n\nconst WordDisplay = SplitCurrentWord.map(prevWord => {\n    const ToReturn = CorrectLetters.includes(prevWord) ? <span className='Letters'>{prevWord.toUpperCase()}</span> : <span className='Letters'></span>\n    return ToReturn\n})\n\nconst AlphabetButtons = AlphabetArray.map(preAlph => {\n\n    if(CorrectLetters.includes(preAlph)){\n        return <button style={{backgroundColor: \"rgb(54, 167, 54)\"}} onClick={() => HandleLetterButtonClick(preAlph)} className='AlphabetLetters'>{preAlph.toUpperCase()}</button>\n    }\n    else if(!CorrectLetters.includes(preAlph) && GuessedArray.includes(preAlph)){\n        return <button style={{backgroundColor: \"#D02B2B\"}} onClick={() => HandleLetterButtonClick(preAlph)} className='AlphabetLetters'>{preAlph.toUpperCase()}</button>\n    }\n    else {\n        return<button onClick={() => HandleLetterButtonClick(preAlph)} className='AlphabetLetters'>{preAlph.toUpperCase()}</button>\n    }\n})\n\nconst LanguagesDisplay = LanguagesObjectArray.map(prevLang => {\n    return prevLang.alive ? <h2 className=\"Languages\" key={prevLang.name} style={{backgroundColor: prevLang.backgroundColor, color: prevLang.color}}>{prevLang.name}</h2> : null\n})\n\n    return(\n        <main>\n            <div className=\"GameResultStatus\">\n                <h2>You Win!</h2>\n                <p>ðŸŽ‰CongratulationsðŸŽ‰</p>\n            </div>\n            <div className=\"LanguagesCollection\">\n                {LanguagesDisplay}\n            </div>\n            <div className='WordToGuess'>\n                {WordDisplay}\n            </div>\n            <div className='AlphabetButtons'>\n                {AlphabetButtons}\n            </div>\n            <button className='NewGameButton'>New Game</button>\n        </main>\n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}